using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace WarehouseSystem
{
    // Модели сущностей с nullable аннотациями
    public class Product
    {
        public int ProductId { get; set; }
        public string Name { get; set; } = string.Empty; // Инициализация для устранения CS8618
        public string Sku { get; set; } = string.Empty;
        public decimal Price { get; set; }
    }

    public class Inventory
    {
        public int InventoryId { get; set; }
        public int ProductId { get; set; }
        public int WarehouseId { get; set; }
        public int Quantity { get; set; }
        public Product? Product { get; set; } // Может быть null
        public Warehouse? Warehouse { get; set; }
    }

    public class Warehouse
    {
        public int WarehouseId { get; set; }
        public string Location { get; set; } = string.Empty;
    }

    // Контекст базы данных
    public class WarehouseDbContext : DbContext
    {
        public DbSet<Product> Products { get; set; } = null!; // Инициализация для устранения CS8618
        public DbSet<Inventory> Inventory { get; set; } = null!;
        public DbSet<Warehouse> Warehouses { get; set; } = null!;

        public WarehouseDbContext(DbContextOptions<WarehouseDbContext> options) : base(options) { }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Product>()
                .HasIndex(p => p.Sku)
                .IsUnique();
            modelBuilder.Entity<Inventory>()
                .HasIndex(i => new { i.ProductId, i.WarehouseId })
                .IsUnique();

            modelBuilder.Entity<Warehouse>().HasData(
                new Warehouse { WarehouseId = 1, Location = "Склад A" },
                new Warehouse { WarehouseId = 2, Location = "Склад B" }
            );
        }
    }

    // Слой работы с БД
    public class DatabaseManager
    {
        private readonly WarehouseDbContext _context;
        private readonly ILogger<DatabaseManager> _logger;

        public DatabaseManager(WarehouseDbContext context, ILogger<DatabaseManager> logger)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        // Публичный метод для доступа к Inventory
        public async Task<List<Inventory>> GetInventoryByWarehouseAsync(int warehouseId)
        {
            try
            {
                return await _context.Inventory
                    .Where(i => i.WarehouseId == warehouseId)
                    .Include(i => i.Product)
                    .Include(i => i.Warehouse)
                    .ToListAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Ошибка при получении inventory: {ex.Message}");
                return new List<Inventory>();
            }
        }

        public async Task<int?> CreateProductAsync(string name, string sku, decimal price)
        {
            try
            {
                var product = new Product { Name = name, Sku = sku, Price = price };
                _context.Products.Add(product);
                await _context.SaveChangesAsync();
                _logger.LogInformation($"Создан товар: {name}, ID: {product.ProductId}");
                return product.ProductId;
            }
            catch (DbUpdateException ex)
            {
                _logger.LogError($"Ошибка при создании товара: {ex.Message}");
                return null;
            }
        }

        public async Task<Product?> GetProductAsync(int productId)
        {
            try
            {
                return await _context.Products.FindAsync(productId);
            }
            catch (Exception ex)
            {
                _logger.LogError($"Ошибка при получении товара: {ex.Message}");
                return null;
            }
        }

        public async Task<bool> UpdateProductAsync(int productId, string? name = null, string? sku = null, decimal? price = null)
        {
            try
            {
                var product = await _context.Products.FindAsync(productId);
                if (product == null) return false;

                if (!string.IsNullOrEmpty(name)) product.Name = name;
                if (!string.IsNullOrEmpty(sku)) product.Sku = sku;
                if (price.HasValue) product.Price = price.Value;

                await _context.SaveChangesAsync();
                _logger.LogInformation($"Обновлен товар: {productId}");
                return true;
            }
            catch (DbUpdateException ex)
            {
                _logger.LogError($"Ошибка при обновлении товара: {ex.Message}");
                return false;
            }
        }

        public async Task<bool> DeleteProductAsync(int productId)
        {
            try
            {
                var product = await _context.Products.FindAsync(productId);
                if (product == null) return false;

                _context.Products.Remove(product);
                await _context.SaveChangesAsync();
                _logger.LogInformation($"Удален товар: {productId}");
                return true;
            }
            catch (DbUpdateException ex)
            {
                _logger.LogError($"Ошибка при удалении товара: {ex.Message}");
                return false;
            }
        }

        public async Task<int?> AddInventoryAsync(int productId, int warehouseId, int quantity)
        {
            try
            {
                var inventory = new Inventory { ProductId = productId, WarehouseId = warehouseId, Quantity = quantity };
                _context.Inventory.Add(inventory);
                await _context.SaveChangesAsync();
                _logger.LogInformation($"Добавлена запись в inventory: ProductId={productId}, WarehouseId={warehouseId}");
                return inventory.InventoryId;
            }
            catch (DbUpdateException ex)
            {
                _logger.LogError($"Ошибка при добавлении в inventory: {ex.Message}");
                return null;
            }
        }

        public async Task<Inventory?> GetInventoryAsync(int productId, int warehouseId)
        {
            try
            {
                return await _context.Inventory
                    .Include(i => i.Product)
                    .Include(i => i.Warehouse)
                    .FirstOrDefaultAsync(i => i.ProductId == productId && i.WarehouseId == warehouseId);
            }
            catch (Exception ex)
            {
                _logger.LogError($"Ошибка при получении записи inventory: {ex.Message}");
                return null;
            }
        }

        public async Task<bool> UpdateInventoryAsync(int inventoryId, int quantity)
        {
            try
            {
                var inventory = await _context.Inventory.FindAsync(inventoryId);
                if (inventory == null) return false;

                inventory.Quantity = quantity;
                await _context.SaveChangesAsync();
                _logger.LogInformation($"Обновлена запись inventory: {inventoryId}");
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError($"Ошибка при обновлении inventory: {ex.Message}");
                return false;
            }
        }
    }

    // Бизнес-слой
    public abstract class BaseService
    {
        protected readonly DatabaseManager _dbManager;
        protected readonly ILogger _logger;

        protected BaseService(DatabaseManager dbManager, ILogger logger)
        {
            _dbManager = dbManager ?? throw new ArgumentNullException(nameof(dbManager));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        protected virtual void ValidateInput<T>(T input, string paramName)
        {
            if (input == null || (input is string str && string.IsNullOrEmpty(str)))
                throw new ArgumentException($"{paramName} не может быть пустым.");
        }
    }

    public class WarehouseService : BaseService
    {
        public WarehouseService(DatabaseManager dbManager, ILogger<WarehouseService> logger)
            : base(dbManager, logger) { }

        public async Task<int?> AddProductAsync(string name, string sku, decimal price)
        {
            ValidateInput(name, nameof(name));
            ValidateInput(sku, nameof(sku));
            if (price <= 0) throw new ArgumentException("Цена должна быть положительной.", nameof(price));

            return await _dbManager.CreateProductAsync(name, sku, price);
        }

        public async Task<bool> MoveProductAsync(int productId, int fromWarehouseId, int toWarehouseId, int quantity)
        {
            if (quantity <= 0) throw new ArgumentException("Количество должно быть положительным.", nameof(quantity));

            var fromInventory = await _dbManager.GetInventoryAsync(productId, fromWarehouseId);
            if (fromInventory == null || fromInventory.Quantity < quantity)
            {
                _logger.LogWarning($"Недостаточно товара на складе {fromWarehouseId}");
                return false;
            }

            var updated = await _dbManager.UpdateInventoryAsync(fromInventory.InventoryId, fromInventory.Quantity - quantity);
            if (!updated) return false;

            var toInventory = await _dbManager.GetInventoryAsync(productId, toWarehouseId);
            if (toInventory != null)
            {
                updated = await _dbManager.UpdateInventoryAsync(toInventory.InventoryId, toInventory.Quantity + quantity);
            }
            else
            {
                await _dbManager.AddInventoryAsync(productId, toWarehouseId, quantity);
            }

            _logger.LogInformation($"Перемещено {quantity} единиц товара {productId} с {fromWarehouseId} на {toWarehouseId}");
            return true;
        }

        public async Task<bool> PerformInventoryAsync(int warehouseId, Dictionary<int, int> actualQuantities)
        {
            ValidateInput(actualQuantities, nameof(actualQuantities));

            foreach (var entry in actualQuantities)
            {
                var productId = entry.Key;
                var actualQuantity = entry.Value;

                var inventory = await _dbManager.GetInventoryAsync(productId, warehouseId);
                if (inventory != null)
                {
                    if (inventory.Quantity != actualQuantity)
                    {
                        await _dbManager.UpdateInventoryAsync(inventory.InventoryId, actualQuantity);
                    }
                }
                else
                {
                    await _dbManager.AddInventoryAsync(productId, warehouseId, actualQuantity);
                }
            }
            _logger.LogInformation($"Инвентаризация завершена для склада {warehouseId}");
            return true;
        }
    }

    public class ReportService : BaseService
    {
        public ReportService(DatabaseManager dbManager, ILogger<ReportService> logger)
            : base(dbManager, logger) { }

        public async Task<string> GenerateStockReportAsync(int warehouseId)
        {
            var inventories = await _dbManager.GetInventoryByWarehouseAsync(warehouseId);

            if (!inventories.Any())
            {
                _logger.LogWarning($"Нет данных для склада {warehouseId}");
                return "Склад пуст.";
            }

            var report = new System.Text.StringBuilder();
            report.AppendLine($"Отчет по остаткам на складе {warehouseId} ({DateTime.Now:yyyy-MM-dd HH:mm:ss})");
            report.AppendLine("------------------------------------------------");
            foreach (var inventory in inventories)
            {
                // Проверка на null для Product
                if (inventory.Product == null)
                {
                    report.AppendLine($"Товар (ID: {inventory.ProductId}): данные отсутствуют, Количество: {inventory.Quantity}");
                    continue;
                }
                report.AppendLine($"Товар: {inventory.Product.Name}, SKU: {inventory.Product.Sku}, Количество: {inventory.Quantity}");
            }

            _logger.LogInformation($"Сформирован отчет для склада {warehouseId}");
            return report.ToString();
        }
    }

    // Слой представления
    public class ConsoleInterface
    {
        private readonly WarehouseService _warehouseService;
        private readonly ReportService _reportService;
        private readonly ILogger<ConsoleInterface> _logger;

        public ConsoleInterface(WarehouseService warehouseService, ReportService reportService, ILogger<ConsoleInterface> logger)
        {
            _warehouseService = warehouseService ?? throw new ArgumentNullException(nameof(warehouseService));
            _reportService = reportService ?? throw new ArgumentNullException(nameof(reportService));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public async Task RunAsync()
        {
            while (true)
            {
                Console.WriteLine("=== Информационная система склада ===");
                Console.WriteLine("1. Добавить товар");
                Console.WriteLine("2. Переместить товар");
                Console.WriteLine("3. Провести инвентаризацию");
                Console.WriteLine("4. Сгенерировать отчет");
                Console.WriteLine("5. Выход");
                Console.Write("Выберите действие (1-5): ");

                string? choice = Console.ReadLine()?.Trim();

                try
                {
                    switch (choice)
                    {
                        case "1":
                            await AddProductAsync();
                            break;
                        case "2":
                            await MoveProductAsync();
                            break;
                        case "3":
                            await PerformInventoryAsync();
                            break;
                        case "4":
                            await GenerateStockReportAsync();
                            break;
                        case "5":
                            Console.WriteLine("Выход...");
                            return;
                        default:
                            Console.WriteLine("Некорректная команда.");
                            break;
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError($"Ошибка: {ex.Message}");
                    Console.WriteLine($"Ошибка: {ex.Message}");
                }

                Console.WriteLine("\nНажмите Enter для продолжения...");
                Console.ReadLine();
                Console.Clear();
            }
        }

        private async Task AddProductAsync()
        {
            Console.Write("Название товара: ");
            string? name = Console.ReadLine()?.Trim();
            if (string.IsNullOrEmpty(name)) throw new ArgumentException("Название не может быть пустым.");

            Console.Write("SKU: ");
            string? sku = Console.ReadLine()?.Trim();
            if (string.IsNullOrEmpty(sku)) throw new ArgumentException("SKU не может быть пустым.");

            Console.Write("Цена: ");
            if (!decimal.TryParse(Console.ReadLine(), out decimal price) || price <= 0)
                throw new ArgumentException("Цена должна быть положительным числом.");

            var productId = await _warehouseService.AddProductAsync(name, sku, price);
            Console.WriteLine(productId.HasValue ? $"Товар добавлен, ID: {productId}" : "Не удалось добавить товар.");
        }

        private async Task MoveProductAsync()
        {
            Console.Write("ID товара: ");
            if (!int.TryParse(Console.ReadLine(), out int productId) || productId <= 0)
                throw new ArgumentException("ID товара должен быть положительным числом.");

            Console.Write("ID исходного склада: ");
            if (!int.TryParse(Console.ReadLine(), out int fromWarehouseId) || fromWarehouseId <= 0)
                throw new ArgumentException("ID склада должен быть положительным числом.");

            Console.Write("ID целевого склада: ");
            if (!int.TryParse(Console.ReadLine(), out int toWarehouseId) || toWarehouseId <= 0)
                throw new ArgumentException("ID склада должен быть положительным числом.");

            Console.Write("Количество: ");
            if (!int.TryParse(Console.ReadLine(), out int quantity) || quantity <= 0)
                throw new ArgumentException("Количество должно быть положительным числом.");

            bool success = await _warehouseService.MoveProductAsync(productId, fromWarehouseId, toWarehouseId, quantity);
            Console.WriteLine(success ? "Товар перемещен." : "Не удалось переместить товар.");
        }

        private async Task PerformInventoryAsync()
        {
            Console.Write("ID склада: ");
            if (!int.TryParse(Console.ReadLine(), out int warehouseId) || warehouseId <= 0)
                throw new ArgumentException("ID склада должен быть положительным числом.");

            var actualQuantities = new Dictionary<int, int>();
            while (true)
            {
                Console.Write("ID товара (0 для завершения): ");
                if (!int.TryParse(Console.ReadLine(), out int productId))
                    throw new ArgumentException("ID товара должен быть числом.");
                if (productId == 0) break;

                Console.Write("Фактическое количество: ");
                if (!int.TryParse(Console.ReadLine(), out int quantity) || quantity < 0)
                    throw new ArgumentException("Количество должно быть неотрицательным числом.");

                actualQuantities[productId] = quantity;
            }

            bool success = await _warehouseService.PerformInventoryAsync(warehouseId, actualQuantities);
            Console.WriteLine(success ? "Инвентаризация завершена." : "Ошибка инвентаризации.");
        }

        private async Task GenerateStockReportAsync()
        {
            Console.Write("ID склада: ");
            if (!int.TryParse(Console.ReadLine(), out int warehouseId) || warehouseId <= 0)
                throw new ArgumentException("ID склада должен быть положительным числом.");

            string report = await _reportService.GenerateStockReportAsync(warehouseId);
            Console.WriteLine("\n" + report);
        }
    }

    // Точка входа
    class Program
    {
        static async Task Main(string[] args)
        {
            var services = new ServiceCollection();
            services.AddDbContext<WarehouseDbContext>(options =>
                options.UseSqlite("Data Source=warehouse.db"));
            services.AddLogging(builder => builder.AddConsole());
            services.AddScoped<DatabaseManager>();
            services.AddScoped<WarehouseService>();
            services.AddScoped<ReportService>();
            services.AddScoped<ConsoleInterface>();

            var serviceProvider = services.BuildServiceProvider();

            using (var scope = serviceProvider.CreateScope())
            {
                var dbContext = scope.ServiceProvider.GetService<WarehouseDbContext>();
                if (dbContext == null)
                {
                    Console.WriteLine("Ошибка: не удалось инициализировать контекст базы данных.");
                    return;
                }
                await dbContext.Database.EnsureCreatedAsync();
            }

            var consoleInterface = serviceProvider.GetService<ConsoleInterface>();
            if (consoleInterface == null)
            {
                Console.WriteLine("Ошибка: не удалось инициализировать консольный интерфейс.");
                return;
            }
            await consoleInterface.RunAsync();
        }
    }
}
